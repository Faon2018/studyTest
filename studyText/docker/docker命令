# 1.镜像操作

## 1.1镜像查找

```shell
docker images 
```

![image-20201207172152899](..\images\image-20201207172152899.png)

**-a :**列出本地所有的镜像（含中间映像层，默认情况下，过滤掉中间映像层）；

![image-20201207172324913](..\images\image-20201207172324913.png)

**-f :**显示满足条件的镜像；

```she
docker iamges -f=reference='[repository]:[tag]' //根据repository和tag模糊删选
docker images -f "before=[repository]:[tag]" //根据repository和tag名称，删选在此镜像之前【根据created时间】的镜像
```



![image-20201207174425438](..\images\image-20201207174425438.png)

**-q :**只显示镜像ID。只显示imagesid

![image-20201207175101024](..\images\image-20201207175101024.png)

**--filter**：根据repository名称和tag名称顾虑，**docker images  ---filter "before=[repository]:[tag]"**,tag不写默认为latest.

![image-20201207173325070](..\images\image-20201207173325070.png)

```shell
docker images --filter=reference='[repository]:[tag]'
```



![image-20201207174045080](..\images\image-20201207174045080.png)

## 1.2镜像删除

```she
docker rmi [options] image [image...]//删除
```

**-f :**强制删除；docker rmi -f  [repository]:[tag(可选)]

**--no-prune :**不移除该镜像的过程镜像，**默认移除**；

![image-20201207180418328](..\images\image-20201207180418328.png)

```shell
docker image prune -a //删除所有未被容器使用的对象
docker iamge prune //删除所有未被 tag 标记和未被容器使用的镜像:
```

```shell
docker container prune //删除所有停止运行的容器:
docker volume prune //删除所有未被挂载的卷:
docker network prune //删除所有网络:
docker system prune //删除 docker 所有资源:
docker system prune -all //删除停止的容器、删除所有未被容器使用的网络、删除所有none的镜像。
```

## 1.3镜像标记

```shell
##标记本地镜像，重新生成一份镜像，但是image id 不会变
docker tag [repository]:[tag(可选)] [new repository name]:[new tag name(默认为latest)]
```

### 1.4 查看镜像的详情

```shell
docker inspect [image]
```

### 1.5创建镜像

```shell
docker build [options] PATH | URL | -
#参数说明
--build-arg=[] :设置镜像创建时的变量；
#例如 Dockerfile 文件内容为
------------
ARG NGINX_VERSION #arg定义变量才能被from使用
ARG BUILD_HELLO
FROM nginx:${NGINX_VERSION}
ARK BUILD_HELLO #在from之后使用需要再次声明
RUN echo "build sucess ${NGINX_VERSION} ${BUILD_HELLO}"
------------
#则构建命令为
docker build --build-arg NGINX_VERSION=1.18-alpine \--build-arg BUILD_HELLO=hello -t nginx:test .
-f :指定要使用的Dockerfile路径；
#例子 docker build -f /home/dokcer/Dockerfile .
# /home/dokcer/Dockerfile 指向Dockerfile 文件位置
# docker build .  //表示Dokcerfile文件在当前路径下
--rm :设置镜像成功后删除中间容器；
--tag, -t: 镜像的名字及标签，通常 name:tag 或者 name 格式；可以在一次构建中为一个镜像设置多个标签。
#创建镜像并命名
docker build -t(或--tag) myimage:latest .
# .(点) 表示镜像构建过程中的上下文环境的目录
--no-cache :创建镜像的过程不使用缓存；
```

# 2.容器操作

## 2.1 关闭运行的容器

```shell
docker stop [container(容器id或者names均可)] #停止一个运行中的容器

```

![image-20201221103637551](..\images\image-20201221103637551.png)

![image-20201221104106942](..\images\image-20201221104106942.png)

## 2.2 启动容器

```shell
docker start  [container(容器id或者names均可)]#启动一个或多个已经被停止的容器
docker restart #重启容器
```

## 2.3删除容器

```shell
docker rm #删除一个或多个容器 docker rm [OPTIONS] CONTAINER [CONTAINER...]
-f :通过 SIGKILL 信号强制删除一个运行中的容器。

-l :移除容器间的网络连接，而非容器本身。

-v :删除与容器关联的卷。
```



![image-20201221104829073](..\images\image-20201221104829073.png)

## 2.4 杀掉容器

```shell
docker kill [container]
-s :向容器发送一个信号

```

![image-20201221110354640](..\images\image-20201221110354640.png)

![image-20201221110407362](..\images\image-20201221110407362.png)

## 2.5创建容器

```shell
docker create #创建一个新的容器但不启动它
用法同 docker run
```

## 2.6 创建并运行容器

```shell
docker run 
d: 后台运行容器，并返回容器ID；
-it
#-i: 以交互模式运行容器，通常与 -t 同时使用；
#-t: 为容器重新分配一个伪输入终端，通常与 -i 同时使用；
-P(大写): 随机端口映射，容器内部端口随机映射到主机的端口 #主机端口随机，容器端口为80

-p: 指定端口映射，格式为：主机(宿主)端口:容器端口

-e username="ritchie": 设置环境变量；
--network，--net 连接网络（会覆盖默认bridge网络docker0）
#创建三个容器，分别前两个使用默认网络启动容器，第三个使用自定义bridge网络启动。 然后再将第二个容器添加到自定义网络。这三个容器的网络情况如下：
#第一个容器：只有默认的docker0
#第二个容器：属于两个网络：docker0和自定义网络
#第三个容器：只属于自定义网络
#当指定连接网络时，进入容器可用ifconfig查看网络
--name="nginx-lb": 为容器指定一个名称；
--volume , -v: 绑定一个卷，#当挂在文件时，先创建文件，不然会将文件创建成文件夹，从而出错。
--workdir , -w 容器的工作目录
```

```shell
docker run --name mysql_01 -d -p 3306:3306 -d -e MYSQL_ROOT_PASSWORD=123456 mysql:5.7 #创建mysql容器并运行
```

## 2.7 连接容器

```shell
docker exec -it [container] /bin/bash #进入容器
docker exec -it [container] bash #进入容器
docker exec -it [container] sh #进入容器
```

## 2.8容器详情

```shell
docker inspect [container] #运行和未运行的容器均可查看,也可找ip和端口信息
docker inspect --format='{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' [container] #查询ip并只显示ip
```

## 2.9查看容器日志

```shell
docker logs [options] container
-f : 跟踪日志输出
--since :显示某个开始时间的所有日志
-t : 显示时间戳
--tail :仅列出最新N条容器日志
```

# 命令参数问题

+ 通过追加 --help查看命令

  ![image-20201231170839978](..\images\image-20201231170839978.png)

```shell
#docker build --build-arg  参数为list 
#当只有一个参数时，和strig一样
#多个时用 \ 追加
docker build -t nginx:latest  --build-arg NGINX_VERSION=1.18-alpine \--build-arg BUILD_HELLO=hello  .
#注意 \与第二个参数设置指令之间不能有空格
```

# 数据卷

+ 创建数据卷

  ```shell
  docker volume create [OPTIONS] [VOLUME]
  #options
  --driver,-d 数据卷的驱动；默认为local
  --lable 数据卷的元数据
  --name 数据卷的名称
  --opt,-o  数据卷驱动选项
  #examples
  docker volume create -d local  testvolume
  #启动容器时可应用该卷
  docker run -d -v testvolume:/world myimage
  ```

+ 查看一个或多个数据卷详情

  ```shell
  docker volume inspect [OPTIONS] [VOLUME..]
  #examples
  docker volume inspect myvolume
  docker volume inspect --format '{{ .Mountpoint }}' myvolume
  ```

+ 数据卷列表

  ```shell
  docker volume ls [OPTIONS]
  #options
  --filter,-f  
  过滤属性：
  dangling (boolean - true or false, 0 or 1)
  driver (a volume driver’s name)
  label (label=<key> or label=<key>=<value>)
  name (a volume’s name)
  #examples
  docker volume ls -f driver=local
  cker volume ls --filter label=is-timelord=yes --filter label=is-timelord=no
  --format
  #examples
  docker volume ls --format "{{.Name}}: {{.Driver}}"
  --quiet , -q 仅显示数据卷名称
  ```

+ 移除未使用的本地卷

  ```shell
  docker volume prune [OPTIONS]
  #options
  --filter 过滤条件
  --force,-f 强制删除
  ```

+ 删除一个或多个数据卷

  ```shell
  docker volume rm [OPTIONS] VOLUME [VOLUME...]
  #options
  --force,-f 强制删除
  ```

# 网络

+ 连接网络

  ```shell
  docker network connect [OPTIONS] NETWORK CONTAINER
  ```

+ 创建网络

  ```shell
  docker network create [OPTIONS] NETWORK
  ```

  



# 操作实例

+ nacos

  nacos数据库配置

  ```properties
  spring.datasource.platform=mysql
  db.num=1
  db.url.0=jdbc:mysql://xx.xx.xx.x:3306/nacos_config?characterEncoding=utf8&connectTimeout=1000&socketTimeout=3000&autoReconnect=true
  db.user=user
  db.password=pass
  ```

  

+ idea 远程连接docker

  ```shell
  vim /lib/systemd/system/docker.service
  ```

  在`ExecStart`后面追加 `-H tcp://0.0.0.0:2375 -H unix://var/run/docker.sock`

  ```shell
  #重新加载配置文件
  systemctl daemon-reload
  #重启docker服务
  systemctl restart docker
  ```

  访问 http://远程docker所在ip:2375/info  查看是否有信息，若存在则配置ok